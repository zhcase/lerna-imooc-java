<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goods">
    <!--    开启二级缓存-->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        order by goods_id desc
        limit 10
    </select>
    <!--    单参数传递 使用parameterType指定参数的数据类型即可 SQL中的#{value}提取参数-->
    <select id="selectById" parameterType="Integer" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where goods_id = #{value}
    </select>
    <!--    多参数传递时 使用parameterType指定Map接口 SQL中的#{key} 提取参数-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price
        limit 0, #{limit}
    </select>

    <!--    利用LinkedHashMap保存多表关联结果-->
    <!--    Mybatis会将每一条记录包装为LinkedHashMap对象-->
    <!--    key是字段名 value是字段对应的值 字段类型根据表结构进行自动判断-->
    <!--    优点：易于扩展 易于使用-->
    <!--    缺点： 太过灵活 无法进行编译时检查-->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_name, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--    结果映射-->
    <resultMap id="rmGoods" type="com.imooc.mybatis.dto.GoodsDTO">
        <!--        设置主键字段与属性映射-->
        <id property="goods.goodsId" column="goods_id"/>
        <result property="goods.title" column="title"/>
        <result property="goods.originalCost" column="original_cost"/>
        <result property="goods.currentPrice" column="current_price"/>
        <result property="goods.discount" column="discount"/>
        <result property="goods.isFreeDelivery" column="is_free_delivery"/>
        <result property="goods.categoryId" column="category_id"/>
        <result property="category.parentId" column="parent_id"/>
        <result property="category.categoryName" column="category_name"/>
        <result property="category.categoryId" column="category_id"/>
        <result property="category.categoryLevel" column="category_level"/>
        <result property="category.categoryOrder" column="category_order"/>
        <result property="test" column="test"/>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.category_name, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--    插入数据返回id-->
    <!--    <insert id="insert" parameterType="com.imooc.mybatis.entity.Goods">-->
    <!--        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount,-->
    <!--        is_free_delivery,category_id)-->
    <!--        VALUES (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})-->
    <!--        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">-->
    <!--            select last_insert_id()-->
    <!--        </selectKey>-->
    <!--    </insert>-->
    <insert id="insert" parameterType="com.imooc.mybatis.entity.Goods"
            useGeneratedKeys="true"
            keyProperty="goodsId"
            keyColumn="goods_id"
    >
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount,
                            is_free_delivery, category_id)
        VALUES (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})

    </insert>

    <update id="update" parameterType="com.imooc.mybatis.entity.Goods">
        UPDATE t_goods
        SET title=#{title},
            sub_title=#{subTitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        WHERE goods_id = #{goodsId}
    </update>
    <delete id="delete" parameterType="Integer">
        delete
        from t_goods
        where goods_id = #{value}
    </delete>

    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods
        <where>
            <if test="categoryId!=null">
                and category_id=#{categoryId}
            </if>
            <if test="currentPrice!=null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>

    <!--    resultMap可用于说明一对多或者多对一的映射逻辑-->
    <!--    id是resultMap引用的标志-->
    <!--    type指向one的实体（Goods）-->
    <resultMap id="rmGoods1" type="com.imooc.mybatis.entity.Goods">
        <!--        映射goods对象的主键到goods_id 字段-->
        <id column="goods_id" property="gdId"/>
        <!--         collection的含义是,在 select  * from t_goods limit 0,1 ,得到结果后，对所有对象遍历得到goods_id字段值-->
        <!--        并代入到goodsDetail命名空间的findByGoodsId的SQL中执行查询-->
        <!--        将得到的 “商品详情‘ 集合赋值给goodsDetails List对象-->
        <collection property="goodsDetails" select="goodsDetail.selectByGoodsId" column="goods_id"/>
    </resultMap>

    <select id="selectOneToMany" resultMap="rmGoods1">
        select *
        from t_goods
        limit 0,10
    </select>

    <select id="selectPage" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price &lt; 1000
    </select>

    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO t_goods(title,sub_title,original_cost,current_price,discount,is_free_delivery)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title},#{item.subTitle},#{originalCost},#{currentPrice},#{discount},#{isFreeDelivery})
        </foreach>
    </insert>

</mapper>